# ==============================================================
# = Data Source
# ==============================================================
#spring.datasource.url = jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE

#Database Configaration  http://localhost:8081/console
spring.h2.console.enabled=true
# default path: h2-console
spring.h2.console.path=/h2-console

spring.datasource.url = jdbc:h2:mem:testdb
spring.datasource.username = sa
spring.datasource.password =

# ==============================================================
# = Show or not log for each sql query
# ==============================================================
spring.jpa.show-sql = true

spring.h2.console.enabled=true

# ==============================================================
# = Hibernate ddl auto (create, create-drop, update)
# ==============================================================
#spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.ddl-auto = update

# ==============================================================
# = The SQL dialect makes Hibernate generate better SQL for the chosen database
# ==============================================================
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect

# ==============================================================
# = The SQL driver setup for datasource
# ==============================================================
spring.datasource.driverClassName=org.h2.Driver

# ==============================================================
# = Keep the connection alive if idle for a long time (needed in production)
# ==============================================================
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder
# ==============================================================
spring.queries.users-query=select email, password, active from user where email=?
spring.queries.roles-query=select u.email, r.role from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?

# ==============================================================
# = Initialize the database using data.sql script
# ==============================================================
#spring.datasource.initialization-mode=always
#spring.jpa.generate-ddl=true
server.port=8081
server.error.whitelabel.enabled=false

#disable for actuator
management.security.enabled = false

#to see actuator in 9000 port
management.port = 9000

spring.devtools.restart.exclude=public/**, static/**, templates/** 

#spring.mail.host=smtp.gmail.com
#spring.mail.port=587
#spring.mail.username=pradipsahaait@gmail.com
#spring.mail.password=pradipSAHA@2017
#spring.mail.defaultEncoding=UTF-8
#spring.mail.properties.mail.smtp.auth=true
#mail.smtp.debug=true 



spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=pradiphibernate@gmail.com
spring.mail.password=pradipSAHA@2017
# Other properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true 
# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
 
# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory

